logging {
  level = "info"
}

prometheus.exporter.unix "default" {
  include_exporter_metrics = true
  disable_collectors       = ["mdadm"]
}

prometheus.scrape "default" {
  scrape_interval = "15s"
  targets = array.concat(
    prometheus.exporter.unix.default.targets,
    [{
      // Self-collect metrics
      job         = "alloy",
      __address__ = "127.0.0.1:12345",
    }],
  )

  // forward_to = [
  // TODO: components to forward metrics to (like prometheus.remote_write or
  // prometheus.relabel).
  // ]
  forward_to = [prometheus.remote_write.default.receiver]
}

prometheus.remote_write "default" {
  endpoint {
    url = "http://localhost:9009/api/v1/push"
  }
}

local.file_match "nginx_access" {
    path_targets = [{"__path__" = "/var/log/nginx/access.log"}]
}

loki.source.file "nginx_access" {
    targets    = local.file_match.nginx_access.targets
    forward_to = [loki.relabel.nginx_access.receiver]
}

// loki.process "nginx_access" {
//     stage.json {
//         expressions = {msec = "", connection = ""}
//     }

//     stage.labels {
//       values = {
//         msec = "",
//         connection = "",
//       }
//     }
//     forward_to = [loki.echo.debug.receiver,loki.write.nginx_access.receiver]
// }


// loki.relabel "nginx_access" {
//     forward_to = [loki.write.nginx_access.receiver]
//     rule {
//         source_labels = ["__meta_docker_container_name"]
//         target_label  = "container"
//     }
// }

loki.relabel "nginx_access" {
    rule {
        target_label  = "service"
        replacement   = "nginx"
    }
    forward_to = [loki.write.nginx_access.receiver]
}

loki.echo "debug" { }

loki.write "nginx_access" {
    endpoint {
        url = "http://localhost:3100/loki/api/v1/push"
    }
}

//
// Docker
//

// Discover docker containers to collect logs from
discovery.docker "docker_containers" {
    // Note that if you are using Docker Desktop Engine this may need to be changed to
    // something like "unix:///${HOME}/.docker/desktop/docker.sock"
    host = "unix:///var/run/docker.sock"
}

// Extract container name from __meta_docker_container_name label and add as label
discovery.relabel "docker_containers" {
    targets = discovery.docker.docker_containers.targets

    rule {
        source_labels = ["__meta_docker_container_name"]
        target_label  = "container"
    }
}

// Scrape logs from docker containers and send to be processed
loki.source.docker "docker_logs" {
    host    = "unix:///var/run/docker.sock"
    targets = discovery.relabel.docker_containers.output
    forward_to = [loki.process.process_logs.receiver]
}

// Process logs and send to Loki
loki.process "process_logs" {
    stage.docker { }

    forward_to = [loki.write.local_loki.receiver]
}

loki.write "local_loki" {
    endpoint {
        url = "http://localhost:3100/loki/api/v1/push"
    }
}
