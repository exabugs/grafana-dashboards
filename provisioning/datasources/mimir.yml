apiVersion: 1
datasources:
  - name: Mimir
    type: prometheus
    uid: mimir
    access: proxy
    url: http://localhost:9009/prometheus
    isDefault: true
    jsonData:
      httpMethod: POST
      manageAlerts: true
      prometheusType: mimir
      prometheusVersion: 2.4.0

  - name: Loki
    type: loki
    uid: loki
    access: proxy
    orgId: 1
    url: http://localhost:3100
    basicAuth: false
    version: 1
    editable: false

  - name: Tempo
    type: tempo
    uid: tempo
    url: http://localhost:3200
    access: proxy
    basicAuth: false
    jsonData:
      tracesToLogsV2:
        # Field with an internal link pointing to a logs data source in Grafana.
        # datasourceUid value must match the uid value of the logs data source.
        datasourceUid: loki
        spanStartTimeShift: -1h
        spanEndTimeShift: 1h
        # tags: ["job", "instance", "pod", "namespace"]
        # filterByTraceID: false
        # filterBySpanID: false
        # customQuery: true
        # query: 'method="$${__span.tags.method}"'
      tracesToMetrics:
        datasourceUid: mimir
        spanStartTimeShift: -1h
        spanEndTimeShift: 1h
        # tags: [{ key: "service.name", value: "service" }, { key: "job" }]
        # queries:
        #   - name: "Sample query"
        #     query: "sum(rate(traces_spanmetrics_latency_bucket{$$__tags}[5m]))"
      # tracesToProfiles:
      #   datasourceUid: "grafana-pyroscope-datasource"
      #   tags: ["job", "instance", "pod", "namespace"]
      #   profileTypeId: "process_cpu:cpu:nanoseconds:cpu:nanoseconds"
      #   customQuery: true
      #   query: 'method="$${__span.tags.method}"'
      serviceMap:
        datasourceUid: mimir
      nodeGraph:
        enabled: true
      search:
        hide: false
      traceQuery:
        timeShiftEnabled: true
        spanStartTimeShift: -1h
        spanEndTimeShift: 1h
      spanBar:
        type: "Tag"
        tag: "http.path"
      streamingEnabled:
        search: true
        metrics: true
